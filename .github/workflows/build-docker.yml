name: CI Pipeline with SonarCloud, Trivy, and OWASP ZAP

on:
  push:
    branches:
      - main  # Runs on pushes to the main branch
  pull_request:
    branches:
      - main  # Runs on pull requests to the main branch

jobs:
  test-and-sonarcloud:
    name: Run Tests, SonarCloud Analysis, and OWASP ZAP Security Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for Angular app
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Use the Node.js version required by your Angular project

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install XVFB (for headless browsers)
      - name: Start xvfb (for headless browsers)
        run: |
          sudo apt-get install xvfb
          export DISPLAY=':99.0'
          Xvfb :99 -ac &

      # Step 5: Run tests and generate coverage report
      - name: Run tests and generate coverage report
        run: |
          npm test

        env:
          CI: true  # Ensures tests run in CI mode (prevents interactive prompts)

      # Step 6: SonarCloud Scan for code quality analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with: 
          args: >
            -Dsonar.projectKey=firassaada_Simple_Angular_App
            -Dsonar.organization=firassaada
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=src/app/modules
            -Dsonar.tests=src/app/tests
             -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      # Step 7: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/angular-app:latest .
       # Step 8: Run Trivy Scan (Security Vulnerability Scan)
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/angular-app:latest'
          format: 'table'
          exit-code: '1'  # Fail the pipeline if vulnerabilities are found
          severity: 'CRITICAL,HIGH'
      # # Step 7: SDocker login (autxxhentsicate to Docker Hub or other registry)
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Step 8: Build Docker image for the app
      # - name: Build Docker image
      #   run: |
      #     docker build -t my-app:$GITHUB_SHA -t my-app:latest .

      # # Step 9: Install Trivy for container image scanning
      # - name: Install Trivy
      #   run: |
      #     curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.35.0/trivy_0.35.0_Linux-64bit.deb -o trivy.deb
      #     sudo dpkg -i trivy.deb

      # # Step 10: Cache Trivy DB
      # - name: Cache Trivy DB
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/trivy
      #     key: ${{ runner.os }}-trivy-db-${{ hashFiles('**/trivy.db') }}
      #     restore-keys: |
      #       ${{ runner.os }}-trivy-db-

      # # Step 11: Run Trivy container image scan
      # - name: Run Trivy container image scan
      #   run: |
      #     trivy image  my-app:$GITHUB_SHA

      # # Step 12: Push Docker image to Docker registry
      # - name: Push Docker image to Docker Hub
      #   run: |
      #     docker push my-app:$GITHUB_SHA
      #     docker push my-app:latest
