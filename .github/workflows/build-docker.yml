name: CI Pipeline with SonarCloud, Trivy, and OWASP ZAP

on:
  push:
    branches:
      - main  # Runs on pushes to the main branch
  pull_request:
    branches:
      - main  # Runs on pull requests to the main branch

jobs:
  test-and-sonarcloud:
    name: Run Tests, SonarCloud Analysis, and OWASP ZAP Security Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for Angular app
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Use the Node.js version required by your Angular project

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install XVFB (for headless browsers)
      - name: Start xvfb (for headless browsers)
        run: |
          sudo apt-get install xvfb
          export DISPLAY=':99.0'
          Xvfb :99 -ac &

      # Step 5: Run tests and generate coverage report
      - name: Run tests and generate coverage report
        run: |
          npm run test -- --watch=false --code-coverage --browsers=ChromeHeadless
        env:
          CI: true  # Ensures tests run in CI mode (prevents interactive prompts)
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

      # Step 6: SonarCloud Scan for code quality analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=firassaada_Simple_Angular_App
            -Dsonar.organization=firassaada
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=src/app/modules
            -Dsonar.tests=src/app/tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      # Step 7: Docker login (authenticate to Docker Hub or other registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 8: Build Docker image for the app
      - name: Build Docker image
        run: |
          docker build -t my-app:$GITHUB_SHA -t my-app:latest .
