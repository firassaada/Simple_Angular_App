name: CI Pipeline with SonarCloud, Trivy, and OWASP ZAP

on:
  push:
    branches:
      - main  # Runs on pushes to the main branch
  pull_request:
    branches:
      - main  # Runs on pull requests to the main branch

jobs:
  # Stage 1: Build
  build:
    name: Build Angular Application
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the Angular app
      - name: Build the Angular app
        run: npm run build

  # Stage 2: SonarCloud & Testing
  sonarcloudtest:
    name: Run Tests and SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install XVFB for headless testing
      - name: Install XVFB
        run: |
          sudo apt-get install xvfb
          export DISPLAY=':99.0'
          Xvfb :99 -ac &

      # Step 5: Run tests
      - name: Run tests and generate coverage report
        run: |
          npm test
        env:
          CI: true

      # Step 6: SonarCloud Analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with: 
          args: >
            -Dsonar.projectKey=firassaada_Simple_Angular_App
            -Dsonar.organization=firassaada
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=src/app/modules
            -Dsonar.tests=src/app/tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # Stage 3: Docker Build and Push
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: sonarcloudtest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/angular-app:latest .

      # Step 4: Push Docker Image to Docker Hub
      - name: Push Docker Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/angular-app:latest

  # Stage 4: Trivy Security Scan
  trivy-scan:
    name: Run Trivy Scan
    runs-on: ubuntu-latest
    needs: docker

    steps:
      # Step 1: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 2: Run Trivy Scan
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/angular-app:latest'
          format: 'json'  # Generate report in JSON
          output: 'trivy-report.json'  # Save report to file
          exit-code: '1'  # Fail pipeline if vulnerabilities are found
          severity: 'CRITICAL,HIGH'

      # Step 3: Upload Trivy Report
      - name: Upload Trivy Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-report
          path: trivy-report.json
